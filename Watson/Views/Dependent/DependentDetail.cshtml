@model Watson.Models.Family_Info

@{
    Layout = null;
}
@* DO NOT USE - REFER TO DETAIL *@

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
    <title>Dependent Detail</title>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @*@Html.HiddenFor(model => model.FamilyMember_id, new { fm_id = Model.FamilyMember_id })
            @Html.HiddenFor(model => model.Employee_id, new { e_id = Model.Employee_id })
            @Html.HiddenFor(model => model.OtherInsurance_id, new { oi_id = Model.OtherInsurance_id})*@
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-horizontal">
            <hr />
            <div class="collapsible">Dependent Detail</div>
            <div class="content" id="dependentSelectForm">
                <p></p>
                <form id="DependentDetail" class="disabled" action="DependentDetail()" method="post">
                    <dl class="dl-horizontal">
                        <dt>
                            <label class="col-md-2 control-label">Employee Number:</label>
                        </dt>
                        <dd id="EmployeeNumber" value="SSN" class="col-md-10">
                            @Html.DisplayFor(model => model.Employee.SSN)
                        </dd>
                        <dt>
                            <label class="col-md-2 control-label">Employee Name:</label>
                        </dt>
                        <dd id="EmployeeFirstName" value="EmployeeFirstName" class="col-md-10">
                            @Html.DisplayFor(model => model.Employee.FirstName)
                        </dd>
                        <dd id="EmployeeLastName" value="EmployeeLastName" class="col-md-10">
                            @Html.DisplayFor(model => model.Employee.LastName)
                        </dd>
                        <dt>
                            <label class="col-md-2 control-label">First Name:</label>
                        </dt>
                        <dd id="FirstName" value="FirstName" class="col-md-10">
                            @Html.DisplayFor(model => model.FirstName)
                        </dd>
                        <dt>
                            <label class="col-md-2 control-label">Last Name:</label>
                        </dt>
                        <dd id="LastName" value="LastName" class="col-md-10">
                            @Html.DisplayFor(model => model.LastName)
                        </dd>
                        <dt>
                            <label class="col-md-2 control-label">Date of Birth:</label>
                        </dt>
                        <dd id="DateOfBirth" value="DateOfBirth" class="col-md-10">
                            @Html.DisplayFor(model => model.DateOfBirth)
                        </dd>
                        <dt>
                            <label class="col-md-2 control-label">Gender:</label>
                        </dt>
                        <dd class="col-md-10">
                            <label class="radio-inline"><input type="radio" id="Male" class="radio-inline" name="Gender" value="Male" @((Model.Gender == "Male") ? "checked" : "") disabled />Male</label>
                            <label class="radio-inline"><input type="radio" id="Female" class="radio-inline" name="Gender" value="Female" @((Model.Gender == "Female") ? "checked" : "") disabled />Female</label>
                        </dd>
                        <dt>
                            <label class="col-md-2 control-label">Insurance Information:</label>
                        </dt>
                        <dd>
                            @foreach (var item in Model.Other_Insurance)
                            {
                                <label class="col-md-2 control-label">Insurance Company:</label>
                                <input type="text" id="InsCompany" class="form-control" name="InsuranceCompany" value="@Html.DisplayFor(model => item.InsuranceCarrier)" />
                                <label class="col-md-2 control-label">Policy Number:</label>
                                <input type="text" id="PolicyNumber" class="form-control" name="PolicyNumber" value="@Html.DisplayFor(model => item.PolicyNumber)" />
                                <label class="col-md-2 control-label">Phone Number:</label>
                                <input type="text" id="InsPhoneNumber" class="form-control" name="PhoneNumber" value="@Html.DisplayFor(model => item.PhoneNumber)" />
                            }

                            <label class="col-md-2 control-label">Mailing Address:</label>
                            @foreach (var item in Model.Other_Insurance)
                            {
                                <input type="text" id="InsMailingAddress" class="form-control" name="MailingAddress" value="@Html.DisplayFor(model => item.MailingAddress)" disabled />
                                <input type="text" id="InsCity" class="form-control" name="City" value="@Html.DisplayFor(model => item.City)" disabled />
                                <input type="text" id="InsState" class="form-control" name="State" value="@Html.DisplayFor(model => item.State)" disabled />
                                <input type="text" id="InsZipCode" class="form-control" name="ZipCode" value="@Html.DisplayFor(model => item.ZipCode)" disabled />
                            }
                        </dd>
                    </dl>
                </form>
            </div>
        </div>
    }
    <p>
        @*@Html.ActionLink("Detail", "DependentDetail", new { fm_id = Model.FamilyMember_id }) |*@
        @Html.ActionLink("Back to Family Overview", "FamilyMemberOverview")
    </p>
</body>
</html>

<style>
    .collapsible {
        background-color: #333;
        color: white;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: center;
        outline: none;
        font-size: 15px;
    }

        .active, .collapsible:hover {
            background-color: #555;
        }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
    }

    .previous {
        background-color: #333;
        color: white;
    }

    .btn {
        background-color: #333;
        color: white;
    }

    .button {
        text-align: right;
    }

    a {
        text-decoration: none;
        display: inline-block;
        padding: 8px 16px;
    }

        a:hover {
            background-color: #ddd;
            color: black;
        }
</style>

<script>
    //document.addEventListener("DOMContentloaded", function () { }
    var col = document.querySelectorAll(".collapsible");
    var i;

    for (i = 0; i < col.length; i++) {
        col[i].addEventListener("click", function () {
            this.classList.toggle("active");

            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            }
            else {
                content.style.display = "block";
            }

        });
    }
</script>

<script>
    //function SpouseOrDependent() {
    //    var choice = document.getElementById("RelationToInsured")
    //    var dependent = document.getElementById("divDependentInfo")
    //    var spouse = document.getElementById("divSpouseInfo")
    //    if (choice.value == "Spouse")
    //    {
    //        spouse.style.display = 'block';
    //        dependent.style.display = 'none';
    //    }
    //    else
    //    {
    //        spouse.style.display = 'none';
    //        dependent.style.display = 'block';

    //    }
    //}

    function CoveredByOtherIns() {
        var div = document.getElementById("depOtherIns")
        var otherIns = document.getElementById('divCoveredByOtherIns')

        //div.style.visibility = (div.style.visibility == 'hidden') ? 'visible' : 'hidden';
        if (div.value == "Yes") {
            otherIns.style.display = 'block';
        }
        else (div.value == "No")
        {
            div.style.display = 'none';
        }


    }
</script>

<script>
    function GetDependent() {

        fm_id = document.getElementById("fm_id").value
        e_id = document.getElementById("e_id").value

        RelationshipToInsured = document.getElementByName("RelationshipToInsured").value
        EmployeeNumber = document.getElementById("EmployeeNumber").value
        EmployeeFirstName = document.getElementById("EmployeeFirstName").value
        EmployeeLastName = document.getElementById("EmployeeLastName").value

        FirstName = document.getElementById("FirstName").value
        LastName = document.getElementById("LastName").value
        DateOfBirth = document.getElementById("DateOfBirth").value
        Gender = document.getElementsByName("Gender").value

        CoveredByOtherIns = document.getElementByName("CoveredByOtherIns").value
        InsCompany = document.getElementById("InsCompany").value
        PolicyNumber = document.getElementById("PolicyNumber").value
        InsPhoneNumber = document.getElementById("InsPhoneNumber").value
        InsMailingAddress = document.getElementById("InsMailingAddress").value
        InsCity = document.getElementById("InsCity").value
        InsState = document.getElementById("InsState").value
        InsZipCode = document.getElementById("InsZipCode").value

        var data = {

            "fm_id": fm_id,
            "e_id": e_id,
            "RelationshipToInsured": RelationshipToInsured,
            "EmployeeNumber": EmployeeNumber,
            "EmployeeFirstName": EmployeeFirstName,
            "EmployeeLastName": EmployeeLastName,
            "FirstName": FirstName,
            "LastName": LastName,
            "DateOfBirth": DateOfBirth,
            "Gender": Gender,
            "CoveredByOtherIns": CoveredByOtherIns,
            "InsCompany": InsCompany,
            "PolicyNumber": PolicyNumber,
            "InsMailingAddress": InsMailingAddress,
            "InsCity": InsCity,
            "InsState": InsState,
            "InsZipCode": InsZipCode,
        }

        var ret = postData('/Family_Info/EditDependent', data)
            .then(data => DependentUpdate(data))
            .catch(error => console.error(error))

        ret();
    }

    function postData(url, data) {
        //Default options are marked with *
        return fetch(url, {
            body: JSON.stringify(data), //must match 'Content-Type' header
            cache: 'no-cache', //*default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', //include, same-origin, *omit
            headers: {
                'user-agent': 'Mozilla/4.0 MDN Example',
                'content-type': 'application/json'
            },
            method: 'Post', //*GET, POST, PUT, DELETE, etc...
            mode: 'cors', //no-cors, cors, *same-origin
            redirect: 'follow', //manual, *follow, error
            referrer: 'no-referrer', //*client, no-referrer
        })
            .then(Response => Response.json()) //parses response to JSON
    }
</script>

