@model Watson.Models.Family_Info


@{
    @ViewBag.Title = "DependentEnrollment";
}

<!DOCTYPE html>


<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dependent Enrollment Page</title>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.FamilyMember_id)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @*Dependent Enrollment*@
        <div class="form-horizontal">
            <hr />
            <button class="collapsible"><h4>Dependent Enrollment</h4></button>
            <div class="content" id="dependentSelectForm">
                @*<form id="dependentSelectForm" action="/api/Family_Info/DependentEnrollment" method="post">*@
                    <input type="hidden" id="Employee_id" class="form-control" name="Employee_id" value=@ViewBag.Employee_id />
                    <div class="form-group">
                        <label for="RelationToInsured" class="col-md-2 control-label">Relationship to Employee:</label>
                        <div class="col-md-10">
                            <select id="RelationToInsured" name="RelationshipToInsured" onchange="SpouseOrDependent()" class="form-control">
                                @if (ViewBag.spouseExist == false)
                                {
                                    <option id="Spouse" name="RelationshipToInsured" value="Spouse" @((ViewBag.RelationshipToInsured.ToLower() == "spouse") ? "selected" : "")>Spouse</option>
                                }
                                else
                                {
                                    <option id="Dependent" name="RelationshipToInsured" value="Dependent" @((ViewBag.RelationshipToInsured.ToLower() == "Dependent") ? "selected" : "")>Dependent</option>
                                }
                            </select>
                        </div>
                    </div>@*Use foreach to get Employee name and Employee Number from Employee model*@
                    <div class="form-group" id="empName">
                        <label for="EmployeeName" class="col-md-2 control-label">Employee Name:</label>
                        <div class="col-md-10">
                            <input type="text" id="EmployeeName" class="form-control" value="@Html.DisplayFor(model => model.Employee.FirstName) @Html.DisplayFor(model => model.Employee.LastName)" />
                        </div>
                    </div>
                    <div class="form-group" id="empNumber">
                        <label for="SSN" class="col-md-2 control-label">Employee Number:</label>
                        <div class="col-md-10">
                            <input type="text" id="SSN" class="form-control" name="SSN" value="@Html.DisplayFor(model => model.Employee.SSN)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="FirstName" class="col-md-2 control-label">First Name:</label>
                        <div class="col-md-10">
                            <input type="text" id="FirstName" class="form-control" name="FirstName" value="" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="LastName" class="col-md-2 control-label">Last Name:</label>
                        <div class="col-md-10">
                            <input type="text" id="LastName" class="form-control" name="LastName" value="" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="DateOfBirth" class="col-md-2 control-label">Date of Birth:</label>
                        <div class="col-md-10">
                            <input type="text" id="DateOfBirth" class="form-control" name="DateOfBirth" value="" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2 control-label">Gender:</label>
                        <div class="col-md-10">
                            <label class="radio-inline"><input type="radio" id="Male" class="radio-inline" name="Sex" value="true" checked />Male</label>
                            <label class="radio-inline"><input type="radio" id="Female" class="radio-inline" name="Sex" value="false" />Female</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" onclick="DependentEnrollment();" value="Save" id="submit" class="btn btn-outline-primary"/>
                            <input type="submit" onclick="addInputSelection();" id="addDep" value="Add Dependent" class="btn btn-outline-primary">
                        </div>
                    </div>
                @*</form>*@
            </div>
        </div>

    }
    <div>
        <button onclick="SpouseContact();" class="btn btn-outline-secondary">Previous</button> |
        <button onclick="EmployeeOverview();" class="btn btn-outline-secondary">Return to Employee Overview</button>
    </div>
    <p>
        @Html.ActionLink("Edit", "Edit", new { id = Model.FamilyMember_id }) |
        @Html.ActionLink("Back to Family Enrollment", "FamilyMemberEnrollment")
    </p>
</body>
</html>

<script>
    var col = document.getElementByClassName("collapsible");
    var i;

    for (var i = 0; i < col.length; i++) {
        col[i].addEventListener("click", function () {
            this.classList.toggle("active");

            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            }
            else
                content.style.display = "block"
        });
    }
</script>


<style>
    .collapsible {
        background-color: #333333;
        color: white;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
    }

        .active, .collapsible:hover {
            background-color: #555;
        }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
    }
</style>


<html>
<head>
    <meta charset="utf-8" />
    <title></title>
    <script>
        var cnt = 1;
        /* This function recieves a name (string) and finds that element in the document, then removes it from it's parent node.
         * You have to use the removeChild method on the parent node of the object.
         */
        function removeElement(name) {
            var elementToRemove = document.getElementById(name);
            elementToRemove.parentNode.removeChild(elementToRemove);
        }

        function createElement(name, type) {
            var input = document.createElement("input");
            input.type = type;
            var newName = name + cnt;
            input.name = newName;
            input.id = newName;
            return input;
        }

        /* This function recieves a name (string) and attempts to find it in the document object.  it's going to increment the number at the end
         * of the name and create a new object, but only if that object doesn't already exist.
         * It adds three elements, a file input, a red X inside a span tag, and a break tag
         */
        function addInputSelection() {
            // skip the "fname" part of the name and grab the number that is the rest
            newID = ++cnt;
            //check to see if the next increment of that object already exists
            if (document.getElementById("fname" + newID) == null) {
                //get the form object so you have a reference to add child to for the three objects to create
                var formObj = document.getElementById("dependantSelectForm");
                // create the new input objects
                formObj.appendChild(createElement('fname', 'text'));
                formObj.appendChild(createElement('lname', 'text'));
                formObj.appendChild(createElement('dob', 'date'));

                //create the new span tag with the red X in it
                var spanObj = document.createElement("span");
                spanObj.id = "x" + newID;
                spanObj.style = "color:red";
                spanObj.addEventListener("click", function () {
                    removeInputSelection(this);
                })
                spanObj.innerHTML = "X";
                formObj.appendChild(spanObj);
                //create the break tag to make a new line.  have to add an id so we know which one to remove when they click the X
                var newBR = document.createElement("br");
                newBR.id = "br" + newID;
                with (document.getElementById('submit').style) {
                    top = (cnt * 25) + 80 + "px";
                }
                with (document.getElementById('adddep').style) {
                    top = (cnt * 25) + 80 + "px";
                }
                formObj.appendChild(newBR);

            }
        }
        /* This function removes the file, span, and br tags with the same number at the end
         */
        function removeInputSelection(o) {
            cnt--;
            var elementIdNumber = parseInt(o.id.substring(2, o.id.length - 1));

            removeElement("fname" + elementIdNumber);
            removeElement("lname" + elementIdNumber);
            removeElement("dob" + elementIdNumber);
            removeElement("x" + elementIdNumber);
            removeElement("br" + elementIdNumber);
            with (document.getElementById('submit').style) {
                top = (cnt * 25) + 80 + "px";
            }
            with (document.getElementById('adddep').style) {
                top = (cnt * 25) + 80 + "px";
            }
        }
    </script>
</head>
<body>
    <form id="dependantSelectForm" action="\Home\DependantPoster" method="post">
        <input type="text" name="fname1" id="fname1" />
        <input type="text" name="lname1" id="lname1" />
        <input type="date" name="dob1" id="dob1" />

        <span id="x1" style="color:red" onclick="removeInputSelection(this);">X</span>
        <br id="br1" />

        <input type="submit" value="Submit" id="submit" style="position:absolute;top:80px;" />
        <input type="button" onclick="addInputSelection();" value="add dependant" id="adddep" style="position:absolute;top:80px;left:160px">
    </form>
</body>
</html>

<script>
    function DependentEnrollment() {
       

        postData('/postUser', {
            
        })
            .then(data => DependentEnrollment(data))
            .catch(error => console.error(error))
    }


    function postData(url, data) {
        //Default options are marked with *
        return fetch(url, {
            body: JSON.stringify(data), //must match 'Content-Type' header
            cache: 'no-cache', //*default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', //include, same-origin, *omit
            headers: {
                'user-agent': 'Mozilla/4.0 MDN Example',
                'content-type': 'application/json'
            },
            method: 'Post', //*GET, POST, PUT, DELETE, etc...
            mode: 'cors', //no-cors, cors, *same-origin
            redirect: 'follow', //manual, *follow, error
            referrer: 'no-referrer', //*client, no-referrer
        })
            .then(Response => Response.json()) //parses response to JSON
    }
</script>
