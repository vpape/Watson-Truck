@model Watson.Models.Family_Info


@{
    @ViewBag.Title = "SpouseEnrollment";
}

<!DOCTYPE html>


<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Spouse Enrollment Page</title>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.FamilyMember_id)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-horizontal">
            <hr />
            <button class="collapsible"><h4>Spouse Enrollment</h4></button>
            <div class="content">
                @*<form action="/api/Family_Info/SpouseEnrollment" method="post">*@
                    <input type="hidden" id="Employee_id" class="form-control" name="Employee_id" value=@ViewBag.Employee_id />
                    <input type="hidden" id="MartialStatus" class="form-control" name="MartialStatus" value=@ViewBag.MartialStatus />
                    <div class="form-group" id="divRelationshipToInsured">
                        <label for="RelationToInsured" class="col-md-2 control-label">Relationship to Employee:</label>
                        <div class="col-md-10">
                            <select id="RelationToInsured" name="RelationShipToInsured" onchange="SpouseAndORDependent()" class="form-control">
                                @if (ViewBag.spouseExist == false)
                                {
                                    <option id="Spouse" name="RelationshipToInsured" value="Spouse" @((ViewBag.RelationshipToInsured.ToLower() == "spouse") ? "selected" : "")>Spouse</option>
                                }
                                else
                                {
                                    <option id="Dependent" name="RelationshipToInsured" value="Dependent" @((ViewBag.RelationshipToInsured.ToLower() == "Dependent") ? "selected" : "")>Dependent</option>
                                }
                            </select>
                        </div>
                    </div>@*Use foreach to get Employee name and Employee Number from Employee model*@
                    <div class="form-group" id="empNumber">
                        <label for="SSN" class="col-md-2 control-label">Employee Number:</label>
                        <div class="col-md-10">
                            <input type="text" id="SSN" class="form-control" name="SSN" value="@Html.DisplayFor(m => Model.Employee.SSN)" />
                        </div>
                    </div>                    
                    <div class="form-group" id="empName">
                        <label for="" class="col-md-2 control-label">Employee Name:</label>
                        <div class="col-md-10">
                            <input type="text" id="EmployeeName" class="form-control" name="" value="@Html.DisplayFor(model => model.Employee.FirstName) @Html.DisplayFor(model => model.Employee.LastName)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="FirstName" class="col-md-2 control-label">First Name:</label>
                        <div class="col-md-10">
                            <input type="text" id="FirstName" class="form-control" name="FirstName" value="" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="LastName" class="col-md-2 control-label">Last Name:</label>
                        <div class="col-md-10">
                            <input type="text" id="LastName" class="form-control" name="LastName" value="" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="DateOfBirth" class="col-md-2 control-label">Date of Birth:</label>
                        <div class="col-md-10">
                            <input type="text" id="DateOfBirth" class="form-control" name="DateOfBirth" value="" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2 control-label">Gender:</label>
                        <div class="col-md-10">
                            <label class="radio-inline"><input type="radio" id="Male" class="radio-inline" name="Sex" value="true" checked />Male</label>
                            <label class="radio-inline"><input type="radio" id="Female" class="radio-inline" name="Sex" value="false" />Female</label>
                        </div>
                    </div>@*if address is same as employee, then populate using emp address*@
                    <div class="form-group">
                        <label class="col-md-2 control-label">Is Mailing Address Same As Spouse?</label>
                        <div class="col-md-10">
                            <label class="radio-inline"><input type="radio" id="AddrSame" class="radio-inline" name="MailingAddress" value="true" onclick='Contact()' checked />Yes</label>
                            <label class="radio-inline"><input type="radio" id="AddrNotSame" class="radio-inline" name="MailingAddress" value="false" onclick='SpouseContact()' />No</label>
                        </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" onclick="SpouseEnrollment();" value="Save" class="btn btn-primary"/>
                        </div>
                    </div>
                @*</form>*@
            </div>
        </div>
        <div>
            <button onclick="Contact();"  class="btn btn-secondary">Previous</button> |
            <button onclick="SpouseContact();" class="btn btn-secondary">Continue</button>
        </div>
        <p>
            @Html.ActionLink("Edit", "Edit", new { id = Model.FamilyMember_id }) |
            @Html.ActionLink("Back to Family Enrollment", "FamilyMemberEnrollment")
        </p>
</body>
</html>


<script>
    var col = document.getElementByClassName("collapsible");
    var i;

    for (var i = 0; i < col.length; i++) {
        col[i].addEventListener("click", function () {
            this.classList.toggle("active");

            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            }
            else
                content.style.display = "block"
        });
    }
</script>


<style>
    .collapsible {
        background-color: #333333;
        color: white;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
    }

        .active, .collapsible:hover {
            background-color: #555;
        }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
    }
</style>

<script>
    //if onclick= SpouseContact() is 'yes', then need to populate employee address info....otherwise spouse will need to fill out information
    function SpouseContact() {
        var spouse = document.getElementById('divSpouseContact')
        var employee = document.getElementById('divEmpContact')

        if (spouse.value == "yes") {

            spouse.style.display = 'none';
            employee.style.display = 'block';

            //employee.style.visibility = (employee.style.visibility == 'hidden') ? 'visible' : 'hidden';

        }
        else {
            spouse.style.display = 'block';
            employee.style.display = 'none';

            //spouse.style.visibility = (spouse.style.visibility == 'hidden') ? 'visible' : 'hidden';

        }
    }
</script>

<script>
    function SpouseEnrollment() {
        RelationshipToInsured = getElementById("RelationToInsured").value;
        EmployeeNumber = getElementById("SSN").value;
        FirstName = getElementById("FirstName").value;
        LastName = getElementById("LastName").value;
        DateOfBirth = getElementById("DateOfBirth").value;
        Gender = getElementsByName("Sex").value;
        Address = getElementById("AddrSame", "AddrNotSame").value;
        MailingAddress = getElementsByName("MailingAddress").value;
        PhysicalAddress = getElementsByName("PhysicalAddress").value;
        City = getElementById("City").value;
        State = getElementById("State").value;
        ZipCode = getElementById("ZipCode").value;
        Email = getElementById("EmailAddress").value;
        PhoneNumber = getElementById("PhoneNumber").value;
        CellPhone = getElementById("CellPhone").value;

        postData('/postUser', {
            RelationshipToInsured: RelationshipToInsured, EmployeeNumber: EmployeeNumber, FirstName: FirstName, LastName: LastName,
            DateOfBirth: DateOfBirth, Gender: Gender, Address: Address, MailingAddress: MailingAddress, PhysicalAddress: PhysicalAddress,
            City: City, State: State, ZipCode: ZipCode, Email: Email, PhoneNumber: PhoneNumber, CellPhone: CellPhone
                .then(data => SpouseEnrollment(data))
                .catch(error => console.error(error))
        }


        )



    
    }

    function SpouseContact() {

    }

    function Contact() {

    }

    function postData(url, data) {
        // Default options are marked with *
        return fetch(url, {
            body: JSON.stringify(data),
            cache: 'no-cache',
            credentials: 'same-origin',
            headers: {
                'user-agent': 'Mozilla/4.0 MDN Example',
                'content-type': 'application/json'
            },
            method: 'Post',
            mode: 'cors',
            redirect: 'follow',
            referrer: 'no-referrer',
        })
        .then(response => response.JSON())
    }

</script>

