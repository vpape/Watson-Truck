@model Watson.Models.Employee


@{
    @ViewBag.Title = "Detail";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Employee Detail</title>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.User_id)

    <div class="form-horizontal">
        <hr />
        <button class="collapsible"><h4>Employee Detail</h4></button>
        <div class="content">
            @*<form class="disabled" action="/api/Employee/Detail" method="post">*@
            <dl class="dl-horizontal">
                <dt>
                    <label for="CurrentEmployer" class="col-md-2 control-label">Current Employer:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.CurrentEmployer)
                </dd>

                <dt>
                    <label for="SSN" class="col-md-2 control-label">Employee Number:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.SSN)
                </dd>

                <dt>
                    <label for="JobTitle" class="col-md-2 control-label">Job Title:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.JobTitle)
                </dd>

                <dt>
                    <label for="FirstName" class="col-md-2 control-label">First Name:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.FirstName)
                </dd>

                <dt>
                    <label for="LastName" class="col-md-2 control-label">Last Name:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.LastName)
                </dd>

                <dt>
                    <label for="DateOfBirth" class="col-md-2 control-label">Date of Birth:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.DateOfBirth)
                </dd>

                <dt>
                    <label for="Sex" class="col-md-2 control-label">Gender:</label>
                </dt>
                <dd class="col-md-10">
                    <label class="radio-inline"><input disabled type="radio" id="Male" class="radio-inline" name="Sex" value="true" @((Model.Sex == true) ? "checked" : "") />Male</label>
                    <label class="radio-inline"><input disabled type="radio" id="Female" class="radio-inline" name="Sex" value="false" @((Model.Sex == false) ? "checked" : "") />Female</label>
                    @Html.DisplayFor(model => model.Sex)
                </dd>

                <dt>
                    <label for="MaritalStatus" class="col-md-2 control-label">Marital Status:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.MartialStatus)
                </dd>

                @*<dt>
            <label for="HireDate" class="col-md-2 control-label">Hire Date:</label>
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.HireDate)
        </dd>


        <dt>
            <label for="EffectiveDate" class="col-md-2 control-label">Effective Date:</label>
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.EffectiveDate)
        </dd>

        <dt>
            <label for="EligibilityDate" class="col-md-2 control-label">Eligibility Date:</label>
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.EligibilityDate)
        </dd>

        <dt>
            <label for="AnnualSalary" class="col-md-2 control-label">Salary:</label>
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.AnnualSalary)
        </dd>

        <dt>
            <label for="HoursWorkedPerWeek" class="col-md-2 control-label">Hours Worked Per Week:</label>
        </dt>
        <dd class="col-md-10">
            @Html.DisplayFor(model => model.HoursWorkedPerWeek)
        </dd>*@

                <dt>
                    <label for="MailingAddress" class="col-md-2 control-label">Mailing Address:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.MailingAddress)
                </dd>

                <dt>
                    <label for="PhysicalAddress" class="col-md-2 control-label">Physical Address:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.PhysicalAddress)
                </dd>

                <dt>
                    <label for="City" class="col-md-2 control-label">City:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.City)
                </dd>

                <dt>
                    <label for="State" class="col-md-2 control-label">State:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.State)
                </dd>

                <dt>
                    <label for="ZipCode" class="col-md-2 control-label">Zip Code:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.ZipCode)
                </dd>

                <dt>
                    <label for="County" class="col-md-2 control-label">County:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.County)
                </dd>

                <dt>
                    <label for="CityLimits" class="col-md-2 control-label">Within City Limits?</label>
                </dt>
                <dd class="col-md-10">
                    <label class="radio-inline"><input disabled type="radio" id="YesCityLimits" class="radio-inline" name="CityLimits" value="true" @((Model.CityLimits == true) ? "checked" : "") />Yes</label>
                    <label class="radio-inline"><input disabled type="radio" id="YesCityLimits" class="radio-inline" name="CityLimits" value="false" @((Model.CityLimits == false) ? "checked" : "") />No</label>
                </dd>

                <dt>
                    <label for="EmailAddress" class="col-md-2 control-label">Email:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.EmailAddress)
                </dd>

                <dt>
                    <label for="PhoneNumber" class="col-md-2 control-label">Phone Number:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.PhoneNumber)
                </dd>

                <dt>
                    <label for="CellPhone" class="col-md-2 control-label">Cell Phone:</label>
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.CellPhone)
                </dd>
            </dl>
        @*</form>*@
    </div>
</div>
        
    }
    <p>
        @Html.ActionLink("Edit", "Edit", new { id = Model.User_id }) |
        @Html.ActionLink("Back to HomePage", "EmployeeOverview")
    </p>
</body>
</html>

<script>
    var col = document.getElementByClassName("collapsible");
    var i;

    for (var i = 0; i < col.length; i++) {
        col[i].addEventListener("click", function () {
            this.classList.toggle("active");

            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            }
            else
                content.style.display = "block"
        });
    }
</script>

<style>
    .collapsible {
        background-color: #333333;
        color: white;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
    }

        .active, .collapsible:hover {
            background-color: #555;
        }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
    }
</style>

<script>
    //var Employee;

    function Detail() {
        //Employee = data;

        CurrentEmployer = document.getElementById("CurrentEmployer").value;
        JobTitle = document.getElementById("JobTitle").value;
        EmployeeNumber = document.getElementById("SSN").value;
        FirstName = document.getElementById("FirstName").value;
        LastName = document.getElementById("LastName").value;
        DateOfBirth = document.getElementById("DateOfBirth").value;
        Gender = document.getElementsByName("Sex").value;
        MartialStatus = document.getElementsByName("MartialStatus").value;

        MailingAddress = document.getElementsByName("MailingAddress").value;
        PhyscialAddress = document.getElementsByName("PhyscialAddress").value;
        City = document.getElementById("City").value;
        State = document.getElementById("State").value;
        ZipCode = document.getElementById("ZipCode").value;
        County = document.getElementById("County").value;
        CityLimits = document.getElementsByName("CityLimits").value;
        Email = document.getElementById("EmailAddress").value;
        Phone = document.getElementById("PhoneNumber").value;
        Cell = document.getElementById("CellPhone").value;

        postData('/Employee/Detail', {
            CurrentEmployer: CurrentEmployer, JobTitle: JobTitle, EmployeeNumber: EmployeeNumber, FirstName: FirstName,
            LastName: LastName, DateOfBirth: DateOfBirth, Gender: Gender, MartialStatus: MartialStatus,
            MailingAddress: MailingAddress, PhyscialAddress: PhyscialAddress, City: City, State: State,
            ZipCode: ZipCode, CityLimits: CityLimits, Email: Email, Phone: Phone, Cell: Cell
        })
            .then(data => Detail(data))
            .catch(error => console.error(error))
    }

    function postData(url, data) {
        //Default options are marked with *
        return fetch(url, {
            body: JSON.stringify(data), //must match 'Content-Type' header
            cache: 'no-cache', //*default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', //include, same-origin, *omit
            headers: {
                'user-agent': 'Mozilla/4.0 MDN Example',
                'content-type': 'application/json'
            },
            method: 'Post', //*GET, POST, PUT, DELETE, etc...
            mode: 'cors', //no-cors, cors, *same-origin
            redirect: 'follow', //manual, *follow, error
            referrer: 'no-referrer', //*client, no-referrer
        })
            .then(Response => Response.json()) //parses response to JSON
    }
</script>