@model Watson.Models.Employee
@{
    ViewBag.Title = "EditEmp";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
    <title>Edit Employee</title>
</head>
<body>
    <div class="form-horizontal">
        <hr />
        <input type="hidden" id="Employee_id" class="form-control" name="Employee_id"/>
        <div class="collapsible" id="FirstStep">Edit Employee Enrollment?</div>
        <div id="divEditEmp" class="content">
            <p></p>
            <p></p>
            <div class="form-group">
                <label class="col-md-2 control-label">Employee Role:</label>
                <div class="col-md-10">
                    <input type="text" id="Role" class="form-control" value="@Html.DisplayFor(model => model.EmployeeRole)" disabled>                    
                </div>
            </div>
            <div class="form-group">
                <label for="CurrentEmployer" class="col-md-2 control-label">Current Employer:</label>
                <div class="col-md-10">
                    <input type="text" id="CurrentEmployer" class="form-control" name="CurrentEmployer" value="@Html.DisplayFor(model => model.CurrentEmployer)" />
                </div>
            </div>
            <div class="form-group">
                <label for="JobTitle" class="col-md-2 control-label">Job Title:</label>
                <div class="col-md-10">
                    <input type="text" id="JobTitle" class="form-control" name="JobTitle" value="@Html.DisplayFor(model => model.JobTitle)" />
                </div>
            </div>
            <div class="form-group">
                <label for="EmpNumber" class="col-md-2 control-label">Employee Number:</label>
                <div class="col-md-10">
                    <input type="text" id="EmpNumber" class="form-control" name="SSN" value="@Html.DisplayFor(model => model.SSN)" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-md-2 control-label">Marital Status:</label>
                <div class="col-md-10">
                    <select id="MaritalStatus" onchange="return MaritalStatusChange()" class="form-control">
                        <option value="MarriedwDep" @(Model.MaritalStatus == "MarriedwDep" ? "selected" : "")>Married with Dependents</option>
                        <option value="Married" @(Model.MaritalStatus == "Married" ? "selected" : "")>Married</option>
                        <option value="SinglewDep" @(Model.MaritalStatus == "SinglewDep" ? "selected" : "")>Single with Dependents</option>
                        <option value="Single" @(Model.MaritalStatus == "Single" ? "selected" : "")>Single</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="FirstName" class="col-md-2 control-label">First Name:</label>
                <div class="col-md-10">
                    <input type="text" id="FirstName" class="form-control" name="FirstName" value="@Html.DisplayFor(model => model.FirstName)" />
                </div>
            </div>
            <div class="form-group">
                <label for="LastName" class="col-md-2 control-label">Last Name:</label>
                <div class="col-md-10">
                    <input type="text" id="LastName" class="form-control" name="LastName" value="@Html.DisplayFor(model => model.LastName)" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-md-2 control-label">Date of Birth:</label>
                <div class="col-md-10">
                    <input type="date" id="DateOfBirth" class="form-control" name="DateOfBirth" value="@Convert.ToDateTime(Model.DateOfBirth).ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-md-2 control-label">Gender:</label>
                <div class="col-md-10">
                    <select id="Gender" class="form-control">
                        <option value="Male" @(ViewBag.Gender == "Male" ? "selected" : "")>Male</option>
                        <option value="Female" @(ViewBag.Gender == "Female" ? "selected" : "")>Female</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-11">
                    <button id="EditEmpUpdate" class="btn">Save</button>
                </div>
            </div>
        </div>
    </div>
    @* Contact Info *@
    <div class="form-horizontal">
        <hr />
        <div class="collapsible" id="SecondStep">Edit Contact Information?</div>
        <div id="divEditEmpStepTwo" class="content">
            <p></p>
            <p></p>
            <div id="divMailingAddress">
                <div class="form-group">
                    <label for="MailingAddress" class="col-md-2 control-label">Mailing Address:</label>
                    <div class="col-md-10">
                        <input type="text" id="MailingAddress" class="form-control" placeholder="Street" name="MailingAddress" value="@Html.DisplayFor(model => model.MailingAddress)" />
                        <input type="text" id="PObox" class="form-control" placeholder="PO Box" name="PObox" value="@Html.DisplayFor(model => model.PObox)" />
                        <input type="text" id="City" class="form-control" placeholder="City" name="City" value="@Html.DisplayFor(model => model.City)" />
                        <input type="text" id="State" class="form-control" placeholder="State" name="State" value="@Html.DisplayFor(model => model.State)" />
                        <input type="text" id="ZipCode" class="form-control" placeholder="Zip Code" name="ZipCode" value="@Html.DisplayFor(model => model.ZipCode)" />
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label class="col-md-2 control-label">Within City Limits?</label>
                <div class="col-md-10">
                    <select id="CityLimits" class="form-control">
                        <option value="Yes" @(ViewBag.CityLimits == "Yes" ? "selected" : "")>Yes</option>
                        <option value="No" @(ViewBag.CityLimits == "No" ? "selected" : "")>No</option>
                    </select>
                </div>
            </div>
            @*<div class="form-group">
                    <label class="col-md-2 control-label">Within City Limits?</label>
                    <div class="col-md-10" id="CityLimits">
                        <label class="radio-inline"><input type="radio" id="YesCityLimits" class="radio-inline" name="CityLimits" value="true" checked />Yes</label>
                        <label class="radio-inline"><input type="radio" id="NoCityLimits" class="radio-inline" name="CityLimits" value="false" />No</label>
                    </div>
                </div>*@
            <div class="form-group" id="divMailingAddress">
                <label class="col-md-2 control-label">Is your Physical Address same as Mailing Address?</label>
                <div class="col-md-10">
                    <label class="radio-inline"><input type="radio" id="addressSame" class="radio-inline" onclick="HidePhysicalAddress()" name="Address" value="true" />Yes</label>
                    <label class="radio-inline"><input type="radio" id="addressNotSame" class="radio-inline" onclick="ShowPhysicalAddress()" name="Address" value="false" checked />No</label>
                </div>
            </div>
            <div id="divPhysicalAddress">
                <div class="form-group">
                    <label for="PhysicalAddress" class="col-md-2 control-label">Physical Address:</label>
                    <div class="col-md-10">
                        <input type="text" id="PhysicalAddress" class="form-control" placeholder="Street" name="PhysicalAddress" value="@Html.DisplayFor(model => model.PhysicalAddress)" />
                        <input type="text" id="City2" class="form-control" placeholder="City" name="CityTwo" value="@Html.DisplayFor(model => model.CityTwo)" />
                        <input type="text" id="State2" class="form-control" placeholder="State" name="StateTwo" value="@Html.DisplayFor(model => model.StateTwo)" />
                        <input type="text" id="ZipCode2" class="form-control" placeholder="Zip Code" name="ZipCodeTwo" value="@Html.DisplayFor(model => model.ZipCodeTwo)" />
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="EmailAddress" class="col-md-2 control-label">Email Address:</label>
                <div class="col-md-10">
                    <input type="text" id="EmailAddress" class="form-control" placeholder="Email" name="EmailAddress" value="@Html.DisplayFor(model => model.EmailAddress)" />
                </div>
            </div>
            <div class="form-group">
                <div class="container">
                    <label class="col-md-2 control-label">Phone Number:</label>
                    <div>
                        <div class="form-group phone-number">
                            <div>
                                <input type="tel" id="PhoneNumber" class="form-control" name="PhoneNumber" value="@Html.DisplayFor(model => model.PhoneNumber)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="container">
                    <label class="col-md-2 control-label">Cell Phone:</label>
                    <div>
                        <div class="form-group phone-number">
                            <div>
                                <input type="tel" id="CellPhone" class="form-control" name="CellPhone" value="@Html.DisplayFor(model => model.CellPhone)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-11">
                    <button id="EditEmpUpdateStepTwo" class="btn">Save</button>
                    @*<input id="Submit" type="submit" onclick="return EmployeeEditUpdate()" value="Save" class="btn" />*@
                </div>
            </div>
        </div>
    </div>
    <p>
        @Html.ActionLink("Back to List", "EmpOverview")
    </p>
</body>
</html>



@*<div>
        button needs to display based on martial status (ie....if employee is single during employment
    and gets married or have a baby at a later date, they will need to be added to plan)
            (or if they need to add dependent because they just had a baby
        <input type="button" onclick="SpouseEnrollment()" value="Add Spouse" class="btn" />
        <input type="button" onclick="DependentEnrollemnt()" value="Add Dependent" class="btn" />
    </div>*@



<style>
    .collapsible {
        background-color: #333;
        color: white;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: center;
        outline: none;
        font-size: 15px;
    }

    .active, .collapsible:hover {
        background-color: blue;
    }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
    }

    .button {
        text-align: right;
    }

    .btn:hover {
        background-color: blue;
        color: white;
    }

    a {
        text-decoration: none;
        display: inline-flex;
        padding: 8px 8px;
    }

    .phone-number .col-xs-3::after {
        content: "-";
        position: absolute;
        right: 5px;
        color: black;
        border: 0px solid;
        top: 8px;
    }

    .phone-number .col-xs-6 {
        width: 100%;
    }

    .phone-number .col-xs-4, .phone-number .col-xs-6 {
        padding-left: 0;
    }
</style>

<script>
    var col = document.querySelectorAll(".collapsible");
    var i;
    var Employee_id;

    for (i = 0; i < col.length; i++) {
        col[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }

    function HidePhysicalAddress() {
        document.getElementById("divPhysicalAddress").style.display = "none";
    }

    function ShowPhysicalAddress() {
        document.getElementById("divPhysicalAddress").style.display = "block";
    }

    function MaritalStatusChange() {

    }

    document.addEventListener("DOMContentLoaded", function () {
        document.querySelector("#EditEmpUpdate").addEventListener("click", function () {
            Role = document.getElementById("Role").value;
            CurrentEmployer = document.getElementById("CurrentEmployer").value;
            JobTitle = document.getElementById("JobTitle").value;
            EmpNumber = document.getElementById("EmpNumber").value;
            FirstName = document.getElementById("FirstName").value;
            LastName = document.getElementById("LastName").value;
            DateOfBirth = document.getElementById("DateOfBirth").value;
            MaritalStatus = document.getElementById("MaritalStatus").value;
            Gender = document.getElementById("Gender").value;

            var data = {
                "Role": Role,
                "CurrentEmployer": CurrentEmployer,
                "JobTitle": JobTitle,
                "EmpNumber": EmpNumber,
                "FirstName": FirstName,
                "LastName": LastName,
                "DateOfBirth": DateOfBirth,
                "MaritalStatus": MaritalStatus,
                "Gender": Gender,
            }

            //var ret = postData('EmployeeEditUpdate', data)
            //    .then(data => FirstStep(data))
            //    .error(error => console.error(error))

            fetch('EmployeeEditUpdate', data, {
                body: JSON.stringify(data), //must match 'Content-Type' header
                cache: 'no-cache', //*default, no-cache, reload, force-cache, only-if-cached
                credentials: 'same-origin', //include, same-origin, *omit
                headers: {
                    'Accept': 'application/json',
                    'user-agent': 'Mozilla/4.0 MDN Example',
                    'content-type': 'application/json'
                },
                method: 'Post', //*GET, POST, PUT, DELETE, etc...
                mode: 'same-origin', //no-cors, cors, *same-origin
                redirect: 'follow', //manual, *follow, error
                referrer: 'no-referrer', //*client, no-referrer
            }).then(res => res.json())
                .then(response => FirstStep(response))
                .catch(error => console.error('Error:', error));
        })

        document.querySelector("#EditEmpUpdateStepTwo").addEventListener("click", function () {
            MailingAddress = document.getElementById("MailingAddress").value;
            PObox = document.getElementById("PObox").value;
            City = document.getElementById("City").value;
            State = document.getElementById("State").value;
            ZipCode = document.getElementById("ZipCode").value;
            PhysicalAddress = document.getElementById("PhysicalAddress").value;
            City2 = document.getElementById("City2").value;
            State2 = document.getElementById("State2").value;
            ZipCode2 = document.getElementById("ZipCode2").value;
            EmailAddress = document.getElementById("EmailAddress").value;
            PhoneNumber = document.getElementById("PhoneNumber").value;
            CellPhone = document.getElementById("CellPhone").value;
            CityLimits = document.getElementById("CityLimits").value;

            var data = {
                "Employee_id": Employee_id,
                "MailingAddress": MailingAddress,
                "PObox": PObox,
                "City": City,
                "State": State,
                "ZipCode": ZipCode,
                "PhysicalAddress": PhysicalAddress,
                "City2": City2,
                "State2": State2,
                "ZipCode2": ZipCode2,
                "CityLimits": CityLimits,
                "EmailAddress": EmailAddress,
                "PhoneNumber": PhoneNumber,
                "CellPhone": CellPhone,
            }

            //var ret = postData('EmployeeEditUpdate', data)
            //    .then(data => {
            //        console.log(data);
            //        SecondStep(data)
            //    })
            //    .catch(error => console.error(error))
        })
    })

    function FirstStep(emp) {
        document.querySelector("#FirstStep").nextElementSibling.style.display = "none";
        document.querySelector("#SecondStep").nextElementSibling.style.display = "block";
        Employee_id = emp.data;
    }

    function SecondStep(emp) {
        document.querySelector("#FirstStep").nextElementSibling.style.display = "none";
        document.querySelector("#SecondStep").nextElementSibling.style.display = "none";
    }

    function postData(url, data) {
        //Default options are marked with *
        console.log(data);
        console.log(JSON.stringify(data));
        return fetch(url, {
            body: JSON.stringify(data), //must match 'Content-Type' header
            cache: 'no-cache', //*default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', //include, same-origin, *omit
            headers: {
                'Accept': 'application/json',
                'user-agent': 'Mozilla/4.0 MDN Example',
                'content-type': 'application/json'
            },
            method: 'Post', //*GET, POST, PUT, DELETE, etc...
            mode: 'same-origin', //no-cors, cors, *same-origin
            redirect: 'follow', //manual, *follow, error
            referrer: 'no-referrer', //*client, no-referrer
        }).then(res => res.json())
            .then(response => console.log('Success:', JSON.stringify(response)))
            .catch(error => console.error('Error:', error));
        //.then(Response => {
        //    console.log(Response);
        //    Response.json();
        //}) //parses response to JSON
    }
</script>

